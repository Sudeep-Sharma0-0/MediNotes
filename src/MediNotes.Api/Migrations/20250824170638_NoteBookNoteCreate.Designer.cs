// <auto-generated />
using System;
using System.Collections.Generic;
using MediNotes.Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediNotes.Api.Migrations
{
    [DbContext(typeof(MediNotesDbContext))]
    [Migration("20250824170638_NoteBookNoteCreate")]
    partial class NoteBookNoteCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediNotes.Api.Models.Note", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<ContentBlock>>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NoteBookUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("NoteBookUuid");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MediNotes.Api.Models.NoteBook", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("UserUuid");

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("MediNotes.Api.Models.User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Uuid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediNotes.Api.Models.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("profile");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserUuid");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("MediNotes.Api.Models.UsersPasswordHashes", b =>
                {
                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserUuid");

                    b.ToTable("UsersPasswordHashes");
                });

            modelBuilder.Entity("MediNotes.Api.Models.UsersPersonalData", b =>
                {
                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserUuid");

                    b.ToTable("UsersPersonalData");
                });

            modelBuilder.Entity("MediNotes.Api.Models.Note", b =>
                {
                    b.HasOne("MediNotes.Api.Models.NoteBook", "NoteBook")
                        .WithMany("Notes")
                        .HasForeignKey("NoteBookUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteBook");
                });

            modelBuilder.Entity("MediNotes.Api.Models.NoteBook", b =>
                {
                    b.HasOne("MediNotes.Api.Models.User", "User")
                        .WithMany("NoteBooks")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediNotes.Api.Models.UserImage", b =>
                {
                    b.HasOne("MediNotes.Api.Models.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediNotes.Api.Models.UsersPasswordHashes", b =>
                {
                    b.HasOne("MediNotes.Api.Models.User", "User")
                        .WithOne("PasswordHash")
                        .HasForeignKey("MediNotes.Api.Models.UsersPasswordHashes", "UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediNotes.Api.Models.UsersPersonalData", b =>
                {
                    b.HasOne("MediNotes.Api.Models.User", "User")
                        .WithOne("PersonalData")
                        .HasForeignKey("MediNotes.Api.Models.UsersPersonalData", "UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediNotes.Api.Models.NoteBook", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MediNotes.Api.Models.User", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("NoteBooks");

                    b.Navigation("PasswordHash");

                    b.Navigation("PersonalData");
                });
#pragma warning restore 612, 618
        }
    }
}
